basePath: /taskd/api
definitions:
  controllers.AddTemplateResult:
    properties:
      name:
        type: string
    type: object
  controllers.ResponseData:
    properties:
      code:
        type: string
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  dao.ListTasksResult:
    properties:
      list:
        items:
          $ref: '#/definitions/dao.TaskRec'
        type: array
      total:
        type: integer
    type: object
  dao.PoolResource:
    properties:
      id:
        description: record ID
        type: integer
      pool_id:
        description: pool ID
        type: string
      res_name:
        description: resource name
        type: string
      res_num:
        description: resource quantity
        type: string
    type: object
  dao.TaskObjRec:
    properties:
      args:
        description: User arguments for task (JSON)
        type: string
      callback:
        description: Callback URL
        type: string
      created_by:
        description: Creator
        type: string
      extra:
        description: Extra info for template (JSON)
        type: string
      name:
        description: Task name
        type: string
      namespace:
        description: Namespace
        type: string
      pool:
        description: Task pool
        type: string
      project:
        description: Project name
        type: string
      quotas:
        description: Resource quotas (JSON)
        type: string
      tags:
        description: Tags affecting scheduling (JSON key=value)
        type: string
      template:
        description: Template name
        type: string
      timeout:
        description: Timeout settings (JSON)
        type: string
      uuid:
        description: Task UUID
        type: string
    type: object
  dao.TaskRec:
    properties:
      args:
        description: User arguments for task (JSON)
        type: string
      callback:
        description: Callback URL
        type: string
      create_time:
        description: Creation time
        type: string
      created_by:
        description: Creator
        type: string
      end_log:
        description: Final logs
        type: string
      end_time:
        description: End time
        type: string
      error:
        description: Error message
        type: string
      extra:
        description: Extra info for template (JSON)
        type: string
      name:
        description: Task name
        type: string
      namespace:
        description: Namespace
        type: string
      pool:
        description: Task pool
        type: string
      project:
        description: Project name
        type: string
      quotas:
        description: Resource quotas (JSON)
        type: string
      running_time:
        description: Running start time
        type: string
      start_time:
        description: Start time
        type: string
      status:
        description: Task status
        type: string
      tags:
        description: Tags affecting scheduling (JSON key=value)
        type: string
      template:
        description: Template name
        type: string
      timeout:
        description: Timeout settings (JSON)
        type: string
      update_time:
        description: Last update time
        type: string
      uuid:
        description: Task UUID
        type: string
      warning:
        description: Warning message
        type: string
      yaml_content:
        description: Deployment file content
        type: string
    type: object
  dao.TemplateRec:
    properties:
      create_time:
        type: string
      engine:
        type: string
      extra:
        type: string
      name:
        type: string
      schema:
        type: string
      title:
        type: string
    type: object
  service.TaskCommitResult:
    properties:
      uuid:
        type: string
    type: object
  service.TaskLogsResult:
    properties:
      entities:
        items:
          $ref: '#/definitions/task.EntityLogs'
        type: array
      status:
        type: string
      uuid:
        type: string
    type: object
  service.TaskPoolArgs:
    properties:
      config:
        description: pool configuration for various task engines
        type: string
      description:
        description: pool description showing key information for user understanding
        type: string
      engine:
        description: task execution engine
        type: string
      pool_id:
        description: pool ID
        type: string
      resources:
        items:
          $ref: '#/definitions/dao.PoolResource'
        type: array
      running:
        description: maximum concurrent tasks
        type: integer
      waiting:
        description: maximum queued tasks
        type: integer
    type: object
  service.TaskPoolResult:
    properties:
      pool_id:
        type: string
    type: object
  service.TaskStatusResult:
    properties:
      name:
        type: string
      status:
        type: string
      template:
        type: string
    type: object
  service.TaskTagsResult:
    properties:
      tags:
        additionalProperties:
          type: string
        type: object
    type: object
  task.EntityLogs:
    properties:
      completed:
        type: boolean
      entity:
        type: string
      logs:
        type: string
    type: object
  task.ResourceItem:
    properties:
      allocate:
        description: allocated amount
        type: string
      capacity:
        description: configured capacity
        type: string
      name:
        description: resource name
        type: string
      remain:
        description: actual remaining
        type: string
    type: object
  task.TaskInstanceSummary:
    properties:
      create_time:
        description: queue time
        type: string
      created_by:
        description: created by
        type: string
      end_time:
        description: end time
        type: string
      error:
        description: error message
        type: string
      name:
        description: task name
        type: string
      pool:
        description: running pool
        type: string
      running_time:
        description: actual running start time
        type: string
      start_time:
        description: start time
        type: string
      status:
        description: task status
        type: string
      tags:
        additionalProperties:
          type: string
        description: tags
        type: object
      uuid:
        description: task unique ID
        type: string
      warning:
        description: warning message
        type: string
    type: object
  task.TaskPoolDetail:
    properties:
      config:
        description: task pool configuration
        type: string
      engine:
        description: task pool engine
        type: string
      max_running:
        description: maximum parallel tasks
        type: integer
      max_waiting:
        description: maximum waiting tasks
        type: integer
      pool_id:
        description: Pool ID
        type: string
      resources:
        description: resource information of the pool
        items:
          $ref: '#/definitions/task.ResourceItem'
        type: array
      running:
        description: current running tasks
        type: integer
      tasks:
        description: task information in queue or running
        items:
          $ref: '#/definitions/task.TaskInstanceSummary'
        type: array
      waiting:
        description: current waiting tasks
        type: integer
    type: object
  task.TaskPoolSummary:
    properties:
      config:
        description: Pool configuration
        type: string
      engine:
        description: Task engine used by pool
        type: string
      max_running:
        description: Maximum concurrent tasks
        type: integer
      max_waiting:
        description: Maximum queued tasks
        type: integer
      pool_id:
        description: Pool identifier
        type: string
      running:
        description: Number of tasks currently running in pool
        type: integer
      waiting:
        description: Number of tasks currently waiting in pool
        type: integer
    type: object
info:
  contact:
    name: Zhaojin Zhang,Bochun Zheng
    url: http://www.sangfor.com.cn
  description: Task Management System
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://www.sangfor.com.cn
  title: Task Management
  version: "1.0"
paths:
  /v1/pools:
    get:
      consumes:
      - application/json
      description: List task pool information including resource usage and running
        task overview
      produces:
      - application/json
      responses:
        "200":
          description: Queue information
          schema:
            items:
              $ref: '#/definitions/task.TaskPoolSummary'
            type: array
      summary: List task pools
      tags:
      - TaskPools
    post:
      consumes:
      - application/json
      description: Add a task pool
      parameters:
      - description: Task pool
        in: body
        name: pool
        required: true
        schema:
          $ref: '#/definitions/service.TaskPoolArgs'
      produces:
      - application/json
      responses:
        "200":
          description: Task pool result
          schema:
            $ref: '#/definitions/service.TaskPoolResult'
      summary: Add a task pool
      tags:
      - TaskPools
  /v1/pools/{name}:
    delete:
      consumes:
      - application/json
      description: Delete task pool and associated PoolResource
      parameters:
      - description: Pool name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete success message
          schema:
            type: string
        "400":
          description: Running tasks exist
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "404":
          description: Pool not found
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: Delete task pool
      tags:
      - TaskPools
    get:
      consumes:
      - application/json
      description: Get task pool details
      parameters:
      - description: Pool name
        in: path
        name: name
        required: true
        type: string
      - description: Get detailed info
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Pool information
          schema:
            $ref: '#/definitions/task.TaskPoolDetail'
      summary: Get task pool details
      tags:
      - TaskPools
    put:
      consumes:
      - application/json
      description: Update task pool definition
      parameters:
      - description: Task pool ID
        in: path
        name: name
        required: true
        type: string
      - description: Task pool
        in: body
        name: pools
        required: true
        schema:
          $ref: '#/definitions/service.TaskPoolArgs'
      produces:
      - application/json
      responses:
        "200":
          description: Update task pool
          schema:
            $ref: '#/definitions/service.TaskPoolResult'
      summary: Update task pool
      tags:
      - TaskPools
  /v1/tasks:
    get:
      consumes:
      - application/json
      description: List tasks
      parameters:
      - description: Task name
        in: query
        name: name
        type: string
      - description: Namespace
        in: query
        name: namespace
        type: string
      - description: Task owner
        in: query
        name: owner
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: pageSize
        type: integer
      - description: Target resource pool
        in: query
        name: pool
        type: string
      - description: Project name
        in: query
        name: project
        type: string
      - description: Sort field
        in: query
        name: sort
        type: string
      - description: Task status
        in: query
        name: status
        type: string
      - description: Template name
        in: query
        name: template
        type: string
      - description: UUID
        in: query
        name: uuid
        type: string
      - description: Output task details
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Task list result
          schema:
            $ref: '#/definitions/dao.ListTasksResult'
      summary: List tasks
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Submit task
      parameters:
      - description: Task object
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dao.TaskObjRec'
      produces:
      - application/json
      responses:
        "200":
          description: Task commit result (UUID, RunID)
          schema:
            $ref: '#/definitions/service.TaskCommitResult'
      summary: Submit task
      tags:
      - Tasks
  /v1/tasks/{uuid}:
    delete:
      consumes:
      - application/json
      description: Stop task
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Operation success message
          schema:
            type: string
      summary: Stop task
      tags:
      - Tasks
    get:
      consumes:
      - application/json
      description: Get task metadata
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task object details
          schema:
            $ref: '#/definitions/dao.TaskRec'
      summary: Get task metadata
      tags:
      - Tasks
  /v1/tasks/{uuid}/logs:
    get:
      consumes:
      - application/json
      description: Get task logs with stream support (tail/follow) and regular pagination
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Entity that task may start multiple instances (e.g. threads,
          PODs)
        in: query
        name: entity
        type: string
      - in: query
        name: follow
        type: boolean
      - in: query
        name: tail
        type: integer
      - in: query
        name: timestamps
        type: boolean
      produces:
      - application/json
      - ' plain/text'
      responses:
        "200":
          description: Streaming log output
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: Get task logs
      tags:
      - Tasks
  /v1/tasks/{uuid}/status:
    get:
      consumes:
      - application/json
      description: Get task status
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task status information
          schema:
            $ref: '#/definitions/service.TaskStatusResult'
      summary: Get task status
      tags:
      - Tasks
  /v1/tasks/{uuid}/tags:
    get:
      consumes:
      - application/json
      description: Get task tags
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task tags
          schema:
            $ref: '#/definitions/service.TaskTagsResult'
      summary: Get task tags
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Tag task, usually to notify scheduler for specific handling strategy
        like guaranteed task or idle task
      parameters:
      - description: Task UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Tag content in Key=Value format, multiple tags can be set simultaneously
        in: body
        name: tags
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: All tags of the task
          schema:
            $ref: '#/definitions/service.TaskTagsResult'
      summary: Tag task
      tags:
      - Tasks
  /v1/templates:
    get:
      consumes:
      - application/json
      description: Task templates
      parameters:
      - description: Include details
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of task template names
          schema:
            items:
              $ref: '#/definitions/dao.TemplateRec'
            type: array
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: List task templates
      tags:
      - TaskTemplates
    post:
      consumes:
      - application/json
      description: Create task template
      parameters:
      - description: Template definition
        in: body
        name: templates
        required: true
        schema:
          $ref: '#/definitions/dao.TemplateRec'
      produces:
      - application/json
      responses:
        "200":
          description: Created template (ID+Name)
          schema:
            $ref: '#/definitions/controllers.AddTemplateResult'
      summary: Create task template
      tags:
      - TaskTemplates
  /v1/templates/{name}:
    delete:
      consumes:
      - application/json
      description: Delete task template
      parameters:
      - description: Template name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete success message
          schema:
            type: string
        "400":
          description: Tasks using this template exist
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "404":
          description: Template not found
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: Delete task template
      tags:
      - TaskTemplates
    get:
      consumes:
      - application/json
      description: Get task template
      parameters:
      - description: Template name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task template details
          schema:
            $ref: '#/definitions/dao.TemplateRec'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "404":
          description: Template not found
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: Get task template
      tags:
      - TaskTemplates
    put:
      consumes:
      - application/json
      description: Update task template
      parameters:
      - description: Template name
        in: path
        name: name
        required: true
        type: string
      - description: Template definition
        in: body
        name: templates
        required: true
        schema:
          $ref: '#/definitions/dao.TemplateRec'
      produces:
      - application/json
      responses:
        "200":
          description: Template creation result (ID+Name)
          schema:
            $ref: '#/definitions/controllers.AddTemplateResult'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.ResponseData'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.ResponseData'
      summary: Update task template
      tags:
      - TaskTemplates
swagger: "2.0"
